apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ .Release.Name }}-{{ .Chart.Name }}"
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-{{ .Chart.Name }}"
  serviceName: "{{ .Release.Name }}-{{ .Chart.Name }}"
  replicas: 1
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-{{ .Chart.Name }}"
    spec:
      terminationGracePeriodSeconds: 20
      serviceAccountName: "{{ .Release.Name }}-{{ .Chart.Name }}"
      volumes:
      - name: conf
        emptyDir: {}
      - name: initdb
        emptyDir: {}
      - name: configmap-volume
        configMap:
          name: "{{ .Release.Name }}-{{ .Chart.Name }}"

      initContainers:
      - name: init-mysql
        image: ubuntu:jammy
        command:
        - bash
        - "-c"
        - |
          set -ex
          [[ $HOSTNAME =~ -([0-9]+)$ ]] || exit 1
          cp -LR /mnt/configmap-volume/*.cnf /mnt/conf.d/ && chmod -R 644 /mnt/conf.d/*.cnf
          cp -LR /mnt/configmap-volume/*.sql /mnt/initdb.d/ && chmod -R 644 /mnt/initdb.d/*.sql
          ordinal=${BASH_REMATCH[1]}
          echo [mysqld] > /mnt/conf.d/server-id.cnf
          echo server-id=$(({{ .Values.offsetServerID }} + $ordinal)) >> /mnt/conf.d/server-id.cnf
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: initdb
          mountPath: /mnt/initdb.d
        - name: configmap-volume
          mountPath: /mnt/configmap-volume

      containers:
      - env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Chart.Name }}"
              key: mysql-root-password

        volumeMounts:
        - name: conf
          mountPath: /etc/mysql/conf.d
        - name: initdb
          mountPath: /docker-entrypoint-initdb.d
        - name: "data-{{ .Release.Name }}-{{ .Chart.Name }}"
          mountPath: /var/lib/mysql

        startupProbe: &execDummyQuery
          exec:
            command:
            - /bin/bash
            - -ec
            - |
              mysql -uroot -p"${MYSQL_ROOT_PASSWORD:-}" -e"SELECT 1;"

        readinessProbe:
          !!merge <<: *execDummyQuery

        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -ec
            - |
              mysqladmin ping -uroot -p"${MYSQL_ROOT_PASSWORD}"

        name: mysql
        image: mysql:8.0.35-debian
        ports:
        - name: mysql
          containerPort: 3306
      {{- if .Values.multiSourceReplication }}
      - env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-{{ .Chart.Name }}"
              key: mysql-root-password

        name: init-replica
        image: mysql:8.0.35-debian
        command:
        - /bin/bash
        - -ec
        - |
          until mysql -h127.0.0.1 -uroot -p"${MYSQL_ROOT_PASSWORD}" -e"SELECT 1"; do sleep 1; done
          mysqladmin -h127.0.0.1 -uroot -p"${MYSQL_ROOT_PASSWORD}" stop-replica

          {{- range $source := .Values.multiSourceReplication.sources }}
          {{- with $source }}
          until mysql -h'{{ $.Release.Name }}-{{ .name }}' -uroot -p"${MYSQL_ROOT_PASSWORD}" -e"SELECT 1"; do sleep 1; done
          mysql -h127.0.0.1 -uroot -p"${MYSQL_ROOT_PASSWORD}" -e"CHANGE REPLICATION SOURCE TO SOURCE_HOST='{{ $.Release.Name }}-{{ .name }}', SOURCE_USER='{{ .user }}', SOURCE_PASSWORD='${{ .password }}', SOURCE_AUTO_POSITION=1, GET_SOURCE_PUBLIC_KEY=1 FOR CHANNEL '{{ .name | replace "-" "_" }}'"

          {{- if .filters }}
          {{- $filter := "" }}
          {{- range $_, $v := .filters }}
            {{- $filter = print $filter "," $v }}
          {{- end }}
          mysql -h127.0.0.1 -uroot -p"${MYSQL_ROOT_PASSWORD}" -e"CHANGE REPLICATION FILTER {{ substr 1 -1 $filter }} FOR CHANNEL '{{ .name | replace "-" "_" }}'"
          {{- end }}

          mysql -h127.0.0.1 -uroot -p"${MYSQL_ROOT_PASSWORD}" -e"START REPLICA FOR CHANNEL '{{ .name | replace "-" "_" }}'"
          echo "[init-replica] start replica for channel '{{ .name | replace "-" "_" }}'"
          {{- end }}
          {{- end }}
          sleep inf
      {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: "data-{{ .Release.Name }}-{{ .Chart.Name }}"
      namespace: {{ .Release.Namespace }}
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: {{ .Values.persistence.storage.storageClass }}
      resources:
        requests:
          storage: {{ .Values.persistence.storage.size }}
  {{- end }}
